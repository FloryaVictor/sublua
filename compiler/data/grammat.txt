program := statementList

statementList := statement* 
statement := ifStatement | whileStatement | returnStatement | breakStatement | declaration | callExpr

expr := orExpr
orExpr := andExpr ("or" andExpr)*
andExpr := eqExpr ("and" eqExpr)*
eqExpr := cmpExpr (("==" | "~=") cmpExpr)*
cmpExpr := addExpr (("<" | "<=" | ">" | ">=") addExpr)*
addExpr := mulExpr (("+" | "-") mulExpr)*
mulExpr := unaryExpr (("*" | "/" | "%") unaryExpr)*
unaryExpr := ("+" | "-" | "not")* valueExpr 
valueExpr := [id] | value | "(" expr ")" | callExpr
value := [boolean] | [number] | [string] | "nil"
callExpr := [id] "(" (expr ("," expr)* )? ")" 

ifStatement := "if" expr "then" statementList ("else" statementList)? "end"

whileStatement := "while" expr "do" statementList "end"

returnStatement := "return" expr

breakStatement := "break"

declaration := varDeclaration | functionDeclaration

varDeclaration := [id] "=" expr

functionDeclaration := "function" [id] "(" ([id] ("," [id])*)? ")" statementList "end"

