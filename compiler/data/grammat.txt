program := statement*

statement := expr | ifStatement | whileStatement | returnStatement | breakStatement | declaration

expr := orExpr
orExpr := andExpr ("or" andExpr)*
andExpr := eqExpr ("and" eqExpr)*
eqExpr := cmpExpr (("==" | "~=") cmpExpr)*
eqExpr := addExpr (("<" | "<=" | ">" | ">=") addExpr)*
addExpr := mulExpr (("+" | "-") mulExpr)*
mulExpr := unaryExpr (("*" | "/" | "%") unaryExpr)*
unaryExpr := baseExpr | ("-" | "not") unaryExpr
baseExpr := [id] | value | "(" expr ")" | callExpr
value := [boolean] | [number] | [string] | "nil"
callExpr := [id] "(" (exprList? ")" 
exprList := expr ("," expr)* 

ifStatement := "if" expr "then" program elseStatement? "end"

elseStatement := "else" program

whileStatement := "while" expr "do" program "end"

returnStatement := "return" expr?

breakStatement := "break"

declaration := varDeclaration | functionDeclaration

varDeclaration := [id] assignment?

assignment := "=" expr

functionDeclaration := "function" [id] "(" argsList? ")" program "end"
argsList := [id] ("," [id])*
